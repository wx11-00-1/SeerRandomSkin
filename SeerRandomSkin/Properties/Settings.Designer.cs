//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SeerRandomSkin.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.13.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1,4,8,29,50,104,164,165,166,171,172,174,181,183,192,193,195,224,227,278,306,309,3" +
            "47,353,438,439,447,454,455,468,469,470,490,498,501,503,504,505,508,510,511,515,5" +
            "18,526,530,531,532,544,569,570,584,590,601,603,612,613,614,643,661,682,683,695,6" +
            "97,698,729,760,780,781,782,783,784,796,798,799,804,810,811,820,821,834,864,875,8" +
            "80,881,886,905,908,923,927,928,945,950,957,961,962,965,974,987,998,999,1000,1003" +
            ",1011,1012,1017,1018,1019,1020,1029,1045,1061,1086,1087,1093,1109,1111,1115,1121" +
            ",1122,1155,1156,1165,1166,1167,1168,1177,1179,1187,1189,1201,1202,1204,1215,1256" +
            ",1287,1288,1290,1306,1327,1355,1394,1412,1446,1447,1449,1456,1526,1527,1533,1534" +
            ",1537,1567,1568,1569,1580,1587,1588,1630,1631,1632,1648,1651,1656,1657,1665,1669" +
            ",1678,1679,1680,1681,1700,1715,1730,1745,1746,1748,1756,1776,1777,1802,1806,1809" +
            ",1815,1819,1825,1836,1840,1851,1861,1864,1910,1944,1945,1951,1955,1956,1960,1971" +
            ",1972,2000,2001,2006,2034,2045,2048,2049,2054,2073,2085,2147,2149,2156,2167,2168" +
            ",2172,2173,2174,2175,2178,2186,2197,2206,2218,2219,2234,2242,2247,2250,2257,2262" +
            ",2283,2288,2310,2321,2325,2326,2333,2347,2358,2363,2375,2376,2377,2387,2394,2400" +
            ",2402,2407,2413,2429,2430,2437,2438,2441,2442,2468,2469,2471,2488,2500,2502,2503" +
            ",2508,2516,2520,2521,2533,2535,2545,2580,2591,2606,2607,2612,2619,2620,2625,2634" +
            ",2635,2636,2643,2648,2652,2655,2662,2665,2673,2676,2678,2681,2684,2691,2703,2710" +
            ",2733,2748,2761,2769,2780,2786,2787,2793,2794,2796,2800,2811,2813,2821,2824,2825" +
            ",2835,2837,2839,2840,2842,2843,2849,2850,2852,2853,2858,2859,2861,2873,2875,2879" +
            ",2883,2887,2888,2893,2906,2915,2935,2937,2951,2953,2967,2982,2988,2991,3001,3017" +
            ",3038,3042,3043,3044,3050,3057,3066,3074,3075,3081,3082,3087,3092,3094,3097,3102" +
            ",3103,3104,3105,3110,3111,3112,3113,3117,3118,3122,3128,3129,3134,3137,3140,3141" +
            ",3146,3147,3156,3163,3164,3168,3171,3179,3190,3192,3193,3194,3196,3205,3210,3214" +
            ",3216,3224,3227,3228,3229,3232,3233,3234,3237,3239,3240,3249,3256,3261,3267,3273" +
            ",3289,3290,3293,3294,3295,3296,3302,3303,3304,3305,3307,3308,3309,3311,3312,3315" +
            ",3318,3320,3321,3322,3324,3325,3326,3328,3333,3336,3340,3343,3353,3354,3355,3356" +
            ",3357,3358,3373,3374,3375,3378,3380,3383,3388,3392,3395,3397,3402,3403,3404,3414" +
            ",3418,3421,3425,3430,3435,3436,3437,3439,3440,3443,3446,3455,3456,3458,3461,3465" +
            ",3478,3479,3481,3487,3488,3490,3491,3502,3503,3504,3506,3510,3511,3516,3532,3535" +
            ",3539,3545,3547,3552,3554,3567,3568,3569,3570,3571,3575,3577,3578,3580,3590,3612" +
            ",3626,3631,3643,3645,3649,3655,3663,3664,3665,3668,3669,3676,3679,3683,3685,3691" +
            ",3693,3694,3701,3703,3704,3711,3717,3724,3740,3741,3742,3743,3758,3774,3776,3778" +
            ",3780,3783,3786,3790,3792,3797,3803,3807,3808,3810,3813,3816,3820,3830,3841,3842" +
            ",3845,3857,3858,3861,3866,3867,3873,3875,3879,3883,3888,3889,3891,3892,3898,3914" +
            ",3919,3920,3928,3937,3939,3940,3945,3949,3957,3959,3964,3965,3986,3987,3992,4004" +
            ",4005,4007,4009,4015,4017,4018,4024,4027,4035,4037,4038,4041,4046,4052,4054,4055" +
            ",4057,4061,4064,4065,4068,4074,4081,4086,4088,4093,4097,4101,4106,4107,4110,4114" +
            ",4115,4123,4124,4125,4131,4132,4135,4139,4143,4146,4147,4151,4154,4156,4159,4160" +
            ",4165,4166,4173,4174,4177,4179,4182,4184,4186,4187,4188,4189,4193,4209,4215,4219" +
            ",4221,4222,4231,4233,4237,4240,4241,4242,4246,4247,4249,4250,4251,4252,4253,4261" +
            ",4262,4268,4272,4273,4275,4277,4280,4284,4286,4287,4288,4289,4290,4291,4295,4300" +
            ",4301,4302,4303,4304,4305,4306,4307,4309,4310,4313,4318,4319,4321,4322,4324,4325" +
            ",4327,4328,4329,4330,4331,4333,4334,4338,4340,4342,4345,4347,4352,4353,4356,4358" +
            ",4360,4364,4365,4372,4373,4374,4389,4390,4391,4392,4397,4401,4402,4407,4408,4410" +
            ",4412,4413,4417,4420,4421,4423,4424,4426,4436,4438,4440,4441,4442,4446,4448,4449" +
            ",4451,4455,4456,4458,4459,4461,4462,4465,4466,4467,4469,4472,4477,4480,4481,4482" +
            ",4484,4488,4490,4491,4492,4496,4498,4499,4500,4502,4504,4505,4509,4510,4511,4514" +
            ",4516,4518,4519,4522,4524,4526,4527,4529,4531,4534,4535,4538,4539,4546,4547,4548" +
            ",4551,4552,4553,4554,4555,4557,4559,4560,4566,4567,4569,4572,4573,4574,4577,4582" +
            ",4584,4585,4587,4588,4589,4591,4593,4594,4595,4597,4598,4600,4604,4605,4606,4609" +
            ",4612,4613,4617,4619,4620,4622,4623,4625,4627,4628,4630,4634,4635,4636,4642,4643" +
            ",4644,4646,4648,4649,4650,4651,4652,4653,4654,4655,4656,4658,4661,4662,4663,4667" +
            ",4669,4671,4672,4674,4676,4677,4678,4679,4680,4681,4683,4684,4685,4686,4687,4688" +
            ",4689,4691,4693,4694,4695,4696,4697,4698,4699,4700,4702,4703,4705,4707,4708,4709" +
            ",4710,4711,4712,4713,4715,4716,4717,4718,4719,4720,4721,4722,4723,4724,4725,5002" +
            ",5005,5008,5009,5010,5011,5013,5014,5015,5016,5017,5018,5019,5021,5024,5025,5027" +
            ",5030,5031,5032,5033,5036,5039,5042,5044,5045,5046,5047,5052,5053,5055,5056,5057" +
            ",5058,5059,5060,5061,5062,5063,5064,5069,5071,5072,5073,5074,5075,5111,5357,5403" +
            ",5404,5494,5498,5503,5509,5601,5605,5606,5607,5608,5693,5713,5772,5773,5774,5776" +
            ",5785,5786,5787,5788,5789,5790,5796,5797,5819,5820,5821,5824,5825,1400126,140012" +
            "9,1400130,1400131,1400132,1400133,1400134,1400138,1400139,1400141,1400142,140014" +
            "3,1400148,1400149,1400150,1400153,1400155,1400158,1400159,1400160,1400161,140016" +
            "3,1400166,1400168,1400170,1400174,1400176,1400178,1400179,1400181,1400182,140018" +
            "3,1400185,1400187,1400189,1400193,1400194,1400195,1400204,1400207,1400212,140021" +
            "3,1400214,1400220,1400224,1400225,1400230,1400231,1400236,1400238,1400239,140024" +
            "6,1400247,1400249,1400250,1400252,1400253,1400261,1400262,1400268,1400269,140028" +
            "0,1400281,1400283,1400284,1400286,1400287,1400288,1400294,1400295,1400297,140029" +
            "9,1400301,1400302,1400303,1400304,1400305,1400306,1400307,1400308,1400309,140031" +
            "1,1400312,1400313,1400314,1400315,1400317,1400318,1400319,1400320,1400321,140032" +
            "2,1400324,1400325,1400327,1400328,1400329,1400330,1400332,1400333,1400334,140033" +
            "5,1400336,1400337,1400338,1400339,1400340,1400341,1400342,1400344,1400345,140034" +
            "6,1400348,1400349,1400351,1400352,1400354,1400356,1400359,1400360,1400361,140036" +
            "2,1400363,1400364,1400365,1400367,1400369,1400371,1400372,1400374,1400375,140037" +
            "7,1400378,1400379,1400380,1400382,1400383,1400384,1400385,1400386,1400387,140038" +
            "8,1400389,1400392,1400394,1400395,1400396,1400398,1400399,1400404,1400409,140041" +
            "0,1400411,1400412,1400413,1400414,1400415,1400416,1400417,1400419,1400420,140042" +
            "1,1400422,1400427,1400430,1400431,1400433,1400434,1400436,1400437,1400438,140044" +
            "0,1400442,1400445,1400446,1400447,1400448,1400450,1400454,1400455,1400457,140046" +
            "0,1400461,1400464,1400465,1400467,1400468,1400469,1400470,1400471,1400472,140047" +
            "3,1400474,1400475,1400478,1400479,1400480,1400481,1400482,1400483,1400486,140048" +
            "7,1400489,1400490,1400491,1400492,1400493,1400496,1400497,1400498,1400501,140050" +
            "2,1400503,1400507,1400508,1400510,1400511,1400514,1400516,1400517,1400519,140052" +
            "0,1400522,1400523,1400525,1400527,1400528,1400530,1400531,1400532,1400534,140053" +
            "5,1400536,1400537,1400539,1400540,1400541,1400542,1400543,1400544,1400545,140054" +
            "6,1400547,1400548,1400549,1400552,1400553,1400555,1400556,1400559,1400560,140056" +
            "3,1400564,1400565,1400566,1400568,1400569,1400570,1400571,1400572,1400575,140057" +
            "6,1400577,1400578,1400579,1400580,1400582,1400583,1400584,1400587,1400588,140058" +
            "9,1400592,1400593,1400594,1400595,1400596,1400599,1400600,1400601,1400604,140060" +
            "5,1400606,1400607,1400608,1400611,1400613,1400616,1400619,1400620,1400621,140062" +
            "2,1400623,1400634,1400635,1400636,1400639,1400640,1400641,1400642,1400644,140064" +
            "5,1400646,1400650,1400652,1400653,1400654,1400658,1400659,1400660,1400661,140066" +
            "2,1400664,1400665,1400666,1400667,1400669,1400670,1400671,1400674,1400675,140067" +
            "8,1400679,1400680,1400681,1400682,1400683,1400684,1400685,1400686,1400687,140068" +
            "8,1400689,1400690,1400691,1400692,1400693,1400694,1400695,1400696,")]
        public string SkinIds {
            get {
                return ((string)(this["SkinIds"]));
            }
            set {
                this["SkinIds"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsRandomSkin {
            get {
                return ((bool)(this["IsRandomSkin"]));
            }
            set {
                this["IsRandomSkin"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2,3,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33," +
            "34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61" +
            ",62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,8" +
            "8,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,108,109,110,111,1" +
            "12,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,1" +
            "32,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,1" +
            "52,153,154,155,156,157,158,159,160,161,162,163,167,168,169,170,173,175,176,177,1" +
            "78,179,180,182,184,185,186,187,188,189,190,191,194,196,197,198,199,200,201,202,2" +
            "03,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,2" +
            "23,225,226,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,2" +
            "45,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,2" +
            "65,266,267,268,269,270,271,272,273,274,275,276,277,279,280,281,282,283,284,285,2" +
            "86,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,3" +
            "07,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,3" +
            "28,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,348,3" +
            "49,350,351,352,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,3" +
            "70,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,3" +
            "90,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,4" +
            "10,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,4" +
            "30,431,432,433,434,435,436,437,440,441,442,443,444,445,446,448,449,450,451,452,4" +
            "53,456,457,458,459,460,461,462,463,464,465,466,467,471,472,473,474,475,476,477,4" +
            "78,479,480,481,482,483,484,485,486,487,488,489,491,492,493,494,495,496,497,499,5" +
            "00,502,506,507,509,512,513,514,516,517,519,520,521,522,523,524,525,527,528,529,5" +
            "33,534,535,536,537,538,539,540,541,542,543,545,546,547,548,549,550,551,552,553,5" +
            "54,555,556,557,558,559,560,561,562,563,564,565,566,567,568,571,572,573,574,575,5" +
            "76,577,578,579,580,581,582,583,585,586,587,588,589,591,592,593,594,595,596,597,5" +
            "98,599,600,602,604,605,606,607,608,609,610,611,615,616,617,618,619,620,621,622,6" +
            "23,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,6" +
            "44,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,662,663,664,6" +
            "65,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,684,685,686,6" +
            "87,688,689,690,691,692,693,694,696,699,700,701,702,703,704,705,706,707,708,709,7" +
            "10,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,730,7" +
            "31,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,7" +
            "51,752,753,754,755,756,757,758,759,761,762,763,764,765,766,767,768,769,770,771,7" +
            "72,773,774,775,776,777,778,779,785,786,787,788,789,790,791,792,793,794,795,797,8" +
            "00,801,802,803,805,806,807,808,809,812,813,814,815,816,817,818,819,822,823,824,8" +
            "25,826,827,828,829,830,831,832,833,840,841,842,843,844,845,846,847,848,849,850,8" +
            "51,852,853,854,855,856,857,858,859,860,861,862,863,865,866,867,868,869,870,871,8" +
            "72,873,874,876,877,878,879,882,883,884,885,887,888,889,890,891,892,893,894,895,8" +
            "96,897,898,899,900,901,902,903,904,906,907,909,910,911,912,913,914,915,916,917,9" +
            "18,919,920,921,922,924,925,926,929,930,931,932,933,934,935,936,937,938,939,940,9" +
            "41,942,943,944,946,947,948,949,951,952,953,954,955,956,958,959,960,963,964,966,9" +
            "67,968,969,970,971,972,973,975,976,977,978,979,980,981,982,983,984,985,986,988,9" +
            "89,990,991,992,993,994,995,996,997,1002,1004,1005,1006,1007,1008,1009,1010,1013," +
            "1014,1015,1016,1021,1022,1023,1024,1025,1026,1027,1028,1030,1031,1032,1033,1034," +
            "1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1046,1047,1048,1049,1050,1051," +
            "1052,1053,1054,1055,1056,1057,1058,1059,1060,1062,1063,1064,1065,1066,1067,1068," +
            "1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084," +
            "1085,1088,1089,1090,1091,1092,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103," +
            "1104,1105,1106,1107,1108,1110,1112,1113,1114,1116,1117,1118,1119,1120,1123,1124," +
            "1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140," +
            "1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1157,1158," +
            "1159,1160,1161,1162,1163,1164,1169,1170,1171,1172,1173,1174,1175,1176,1178,1180," +
            "1181,1182,1183,1184,1185,1186,1188,1190,1191,1192,1193,1194,1195,1196,1197,1198," +
            "1199,1200,1203,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1216,1217,1218," +
            "1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234," +
            "1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250," +
            "1251,1252,1253,1254,1255,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267," +
            "1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283," +
            "1284,1285,1286,1289,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302," +
            "1303,1304,1305,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319," +
            "1320,1321,1322,1323,1324,1325,1326,1328,1329,1330,1331,1332,1333,1334,1335,1336," +
            "1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352," +
            "1353,1354,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369," +
            "1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385," +
            "1386,1387,1388,1389,1390,1391,1392,1393,1395,1396,1397,1398,1399,1400,1401,1402," +
            "1403,1404,1405,1406,1407,1408,1409,1410,1411,1413,1414,1415,1416,1417,1418,1419," +
            "1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435," +
            "1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1448,1450,1451,1452,1453,1454," +
            "1455,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471," +
            "1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487," +
            "1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503," +
            "1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519," +
            "1520,1521,1522,1523,1524,1525,1528,1529,1530,1531,1532,1535,1536,1538,1539,1540," +
            "1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556," +
            "1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1570,1571,1572,1573,1574,1575," +
            "1576,1577,1578,1579,1581,1582,1583,1584,1585,1586,1589,1590,1591,1592,1593,1594," +
            "1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610," +
            "1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626," +
            "1627,1628,1629,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645," +
            "1646,1647,1649,1650,1652,1653,1654,1655,1658,1659,1660,1661,1662,1663,1664,1666," +
            "1667,1668,1670,1671,1672,1673,1674,1675,1676,1677,1682,1683,1684,1685,1686,1687," +
            "1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1701,1702,1703,1704," +
            "1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1716,1717,1718,1719,1720,1721," +
            "1722,1723,1724,1725,1726,1727,1728,1729,1731,1732,1733,1734,1735,1736,1737,1738," +
            "1739,1740,1741,1742,1743,1744,1747,1749,1750,1751,1752,1753,1754,1755,1757,1758," +
            "1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774," +
            "1775,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792," +
            "1793,1794,1795,1796,1797,1798,1799,1800,1801,1803,1804,1805,1807,1808,1810,1811," +
            "1812,1813,1814,1816,1817,1818,1820,1821,1822,1823,1824,1826,1827,1828,1829,1830," +
            "1831,1832,1833,1834,1835,1837,1838,1839,1841,1842,1843,1844,1845,1846,1847,1848," +
            "1849,1850,1852,1853,1854,1855,1856,1857,1858,1859,1860,1862,1863,1865,1866,1867," +
            "1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883," +
            "1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899," +
            "1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1911,1912,1913,1914,1915,1916," +
            "1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932," +
            "1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1946,1947,1948,1949,1950," +
            "1952,1953,1954,1957,1958,1959,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970," +
            "1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988," +
            "1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2002,2003,2004,2005,2007," +
            "2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023," +
            "2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2035,2036,2037,2038,2039,2040," +
            "2041,2042,2043,2044,2046,2047,2050,2051,2052,2053,2055,2056,2057,2058,2059,2060," +
            "2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2074,2075,2076,2077," +
            "2078,2079,2080,2081,2082,2083,2084,2086,2087,2088,2089,2090,2091,2092,2093,2094," +
            "2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110," +
            "2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126," +
            "2127,2128,2129,2130,2131,2132,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143," +
            "2144,2145,2146,2148,2150,2151,2152,2153,2154,2155,2157,2158,2159,2160,2161,2162," +
            "2163,2164,2165,2166,2169,2170,2171,2176,2177,2179,2180,2181,2182,2183,2184,2185," +
            "2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2198,2199,2200,2201,2202,2203," +
            "2204,2205,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2220,2221,2222," +
            "2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2235,2236,2237,2238,2239," +
            "2240,2241,2243,2244,2245,2246,2248,2249,2251,2252,2253,2254,2255,2256,2258,2259," +
            "2260,2261,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276," +
            "2277,2278,2279,2280,2281,2282,2284,2285,2286,2287,2289,2290,2291,2292,2293,2294," +
            "2295,2296,2297,2298,2299,2300,2301,2304,2305,2306,2307,2308,2309,2311,2312,2313," +
            "2314,2315,2316,2317,2318,2319,2320,2322,2323,2324,2327,2328,2329,2330,2331,2332," +
            "2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2348,2349,2350," +
            "2351,2352,2353,2354,2355,2356,2357,2359,2360,2361,2362,2364,2365,2366,2367,2368," +
            "2369,2370,2371,2372,2373,2374,2378,2379,2380,2381,2382,2383,2384,2385,2386,2388," +
            "2389,2390,2391,2392,2393,2395,2396,2397,2398,2399,2401,2403,2404,2405,2406,2408," +
            "2409,2410,2411,2412,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425," +
            "2426,2427,2428,2431,2432,2433,2434,2435,2436,2439,2440,2443,2444,2445,2446,2447," +
            "2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463," +
            "2464,2465,2466,2467,2470,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482," +
            "2483,2484,2485,2486,2487,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499," +
            "2501,2504,2505,2506,2507,2509,2510,2511,2512,2513,2514,2515,2517,2518,2519,2522," +
            "2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2534,2536,2537,2538,2539,2540," +
            "2541,2542,2543,2544,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557," +
            "2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573," +
            "2574,2575,2576,2577,2578,2579,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590," +
            "2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2608,2609," +
            "2610,2611,2613,2614,2615,2616,2617,2618,2621,2622,2623,2624,2626,2627,2628,2629," +
            "2630,2631,2632,2633,2637,2638,2639,2640,2641,2642,2644,2645,2646,2647,2649,2650," +
            "2651,2653,2654,2656,2657,2658,2659,2660,2661,2663,2664,2666,2667,2668,2669,2670," +
            "2671,2672,2674,2675,2677,2679,2680,2682,2683,2685,2686,2687,2688,2689,2690,2692," +
            "2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2704,2705,2706,2707,2708,2709," +
            "2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726," +
            "2727,2728,2729,2730,2731,2732,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743," +
            "2744,2745,2746,2747,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760," +
            "2762,2763,2765,2766,2767,2768,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779," +
            "2781,2782,2783,2784,2785,2788,2789,2790,2791,2792,2797,2798,2799,2801,2802,2803," +
            "2804,2805,2806,2807,2808,2809,2810,2812,2814,2815,2816,2817,2818,2819,2820,2822," +
            "2823,2826,2827,2828,2829,2830,2831,2832,2833,2834,2836,2838,2841,2844,2845,2846," +
            "2847,2848,2851,2854,2855,2856,2857,2860,2862,2863,2864,2865,2866,2867,2868,2869," +
            "2870,2871,2872,2874,2876,2877,2878,2880,2881,2882,2884,2885,2886,2889,2890,2891," +
            "2892,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2907,2908,2909," +
            "2910,2911,2912,2913,2914,2916,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927," +
            "2928,2929,2930,2931,2932,2933,2934,2936,2938,2939,2940,2941,2942,2943,2944,2945," +
            "2946,2947,2948,2949,2950,2952,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963," +
            "2964,2965,2966,2968,2969,2970,2971,2972,2973,2974,2975,2976,2977,2978,2979,2980," +
            "2981,2983,2984,2985,2986,2987,2989,2990,2992,2993,2994,2995,2996,2997,2998,2999," +
            "3000,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016," +
            "3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033," +
            "3034,3035,3036,3037,3039,3040,3041,3045,3046,3047,3048,3049,3051,3052,3053,3054," +
            "3055,3056,3058,3059,3060,3061,3062,3063,3064,3065,3067,3068,3069,3070,3071,3072," +
            "3073,3076,3077,3078,3079,3080,3083,3084,3086,3088,3089,3090,3091,3093,3095,3096," +
            "3098,3099,3100,3101,3106,3107,3108,3109,3114,3115,3116,3119,3120,3121,3123,3124," +
            "3125,3126,3127,3130,3131,3132,3133,3135,3136,3138,3139,3142,3143,3144,3145,3148," +
            "3149,3150,3151,3152,3153,3154,3155,3157,3158,3159,3160,3161,3162,3165,3166,3167," +
            "3169,3170,3172,3173,3174,3175,3176,3177,3178,3180,3181,3182,3183,3184,3185,3186," +
            "3187,3188,3189,3191,3195,3197,3198,3199,3200,3201,3202,3203,3204,3206,3207,3208," +
            "3209,3211,3212,3213,3215,3217,3218,3219,3220,3221,3222,3223,3225,3226,3230,3231," +
            "3235,3236,3238,3241,3242,3243,3244,3245,3246,3247,3248,3250,3251,3252,3253,3254," +
            "3255,3257,3258,3259,3260,3262,3263,3264,3265,3266,3268,3269,3270,3271,3272,3274," +
            "3275,3276,3277,3278,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3291,3292," +
            "3297,3298,3299,3300,3301,3306,3310,3313,3314,3316,3317,3319,3323,3327,3329,3330," +
            "3331,3332,3334,3335,3337,3338,3339,3341,3342,3344,3345,3346,3347,3348,3349,3350," +
            "3351,3352,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372," +
            "3376,3377,3379,3381,3382,3384,3385,3386,3387,3389,3390,3391,3393,3394,3396,3398," +
            "3399,3400,3401,3405,3406,3407,3408,3409,3410,3411,3412,3413,3415,3416,3417,3419," +
            "3420,3422,3423,3424,3426,3427,3428,3429,3432,3433,3434,3438,3441,3442,3444,3445," +
            "3447,3448,3449,3450,3451,3452,3453,3454,3457,3459,3460,3462,3463,3464,3466,3467," +
            "3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3480,3482,3483,3484,3485,3486," +
            "3489,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3505,3507,3508,3509,3512," +
            "3513,3514,3515,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529," +
            "3530,3531,3533,3534,3536,3537,3538,3540,3541,3542,3543,3544,3546,3548,3549,3550," +
            "3551,3553,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3572,3573," +
            "3574,3576,3579,3581,3582,3583,3584,3585,3586,3587,3588,3589,3591,3592,3593,3594," +
            "3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610," +
            "3611,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3627,3628," +
            "3629,3630,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3644,3646,3647," +
            "3648,3650,3651,3652,3653,3654,3656,3657,3658,3659,3660,3661,3662,3666,3667,3670," +
            "3671,3672,3673,3674,3675,3677,3678,3680,3681,3682,3684,3686,3687,3688,3689,3690," +
            "3692,3695,3696,3697,3698,3699,3700,3702,3705,3706,3707,3708,3709,3710,3712,3713," +
            "3714,3715,3716,3718,3719,3720,3721,3722,3723,3725,3726,3727,3728,3729,3730,3731," +
            "3732,3733,3734,3735,3736,3737,3738,3739,3744,3745,3746,3747,3748,3749,3750,3751," +
            "3752,3753,3754,3755,3756,3757,3759,3760,3761,3762,3763,3764,3765,3766,3767,3768," +
            "3769,3770,3771,3772,3773,3775,3777,3779,3781,3782,3784,3785,3787,3788,3789,3791," +
            "3793,3794,3795,3796,3798,3799,3800,3801,3802,3804,3805,3806,3809,3811,3812,3814," +
            "3815,3817,3818,3819,3821,3822,3823,3824,3825,3826,3827,3828,3829,3831,3832,3833," +
            "3834,3835,3836,3837,3838,3839,3840,3843,3844,3846,3847,3848,3849,3850,3851,3852," +
            "3853,3854,3855,3856,3859,3860,3862,3863,3864,3865,3868,3869,3870,3871,3872,3874," +
            "3876,3877,3878,3880,3881,3882,3884,3885,3886,3887,3890,3893,3894,3895,3896,3897," +
            "3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3915," +
            "3916,3917,3918,3921,3922,3923,3924,3925,3926,3927,3929,3930,3931,3932,3933,3934," +
            "3935,3936,3938,3941,3942,3943,3944,3946,3947,3948,3950,3951,3952,3953,3954,3955," +
            "3956,3958,3960,3961,3962,3963,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975," +
            "3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3988,3989,3990,3991,3993,3994," +
            "3995,3996,3997,3998,3999,4001,4002,4003,4006,4008,4010,4011,4012,4013,4014,4016," +
            "4019,4020,4021,4022,4023,4025,4026,4028,4029,4030,4031,4032,4033,4034,4036,4039," +
            "4040,4042,4043,4044,4045,4047,4048,4049,4050,4051,4053,4056,4057,4058,4059,4060," +
            "4062,4063,4066,4067,4069,4070,4071,4072,4073,4075,4076,4077,4078,4079,4080,4082," +
            "4083,4084,4085,4087,4089,4090,4091,4092,4094,4095,4096,4098,4099,4100,4102,4103," +
            "4104,4105,4108,4109,4111,4112,4113,4116,4117,4118,4119,4120,4121,4122,4126,4127," +
            "4128,4129,4130,4133,4134,4136,4137,4138,4140,4141,4142,4144,4145,4148,4149,4150," +
            "4152,4153,4155,4157,4158,4161,4162,4163,4164,4167,4168,4169,4170,4171,4172,4175," +
            "4176,4178,4180,4181,4183,4185,4190,4191,4192,4194,4195,4196,4197,4198,4199,4200," +
            "4201,4202,4203,4204,4205,4206,4207,4208,4210,4211,4212,4213,4214,4216,4217,4218," +
            "4220,4223,4224,4225,4226,4227,4228,4229,4230,4232,4234,4235,4236,4238,4239,4243," +
            "4244,4245,4248,4254,4255,4256,4257,4258,4259,4260,4263,4264,4265,4266,4267,4269," +
            "4270,4271,4274,4276,4278,4279,4281,4282,4283,4285,4292,4293,4294,4296,4297,4298," +
            "4299,4308,4311,4312,4314,4315,4316,4317,4320,4323,4326,4332,4335,4336,4337,4339," +
            "4341,4343,4344,4346,4348,4349,4350,4351,4354,4355,4357,4359,4361,4362,4363,4366," +
            "4367,4368,4369,4370,4371,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385," +
            "4386,4387,4388,4393,4394,4395,4396,4398,4400,4403,4404,4405,4406,4409,4411,4414," +
            "4415,4416,4418,4419,4422,4425,4427,4428,4429,4430,4431,4432,4433,4434,4435,4437," +
            "4439,4443,4445,4447,4450,4452,4453,4454,4457,4460,4463,4464,4468,4470,4471,4473," +
            "4474,4475,4476,4478,4479,4483,4485,4486,4487,4489,4493,4494,4495,4497,4501,4503," +
            "4506,4507,4508,4512,4513,4515,4517,4520,4521,4523,4525,4528,4530,4532,4533,4536," +
            "4537,4540,4541,4542,4544,4545,4549,4550,4556,4558,4561,4562,4563,4564,4565,4568," +
            "4570,4571,4575,4576,4578,4579,4580,4581,4583,4586,4590,4592,4596,4599,4601,4602," +
            "4603,4607,4608,4610,4611,4614,4615,4616,4618,4621,4624,4626,4629,4631,4632,4633," +
            "4637,4638,4639,4640,4641,4645,4647,4657,4659,4660,4664,4665,4666,4668,4670,4673," +
            "4675,4682,4690,4692,4701,4704,4706,4714,4862,5000,5001,5003,5004,5006,5007,5012," +
            "5020,5022,5023,5026,5028,5029,5034,5035,5037,5038,5040,5041,5043,5048,5049,5050," +
            "5051,5054,5065,5066,5067,5068,5070,5076,5077,5078,5079,5080,5081,5082,5083,5084," +
            "5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100," +
            "5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5112,5113,5114,5115,5116,5117," +
            "5118,5119,5120,5121,5122,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133," +
            "5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149," +
            "5150,5151,5152,5153,5154,5155,5156,5157,5158,5159,5160,5161,5162,5163,5164,5165," +
            "5166,5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5177,5178,5179,5180,5181," +
            "5182,5183,5184,5185,5186,5187,5188,5189,5190,5191,5192,5193,5194,5195,5196,5197," +
            "5198,5199,5200,5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213," +
            "5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229," +
            "5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5242,5243,5244,5245," +
            "5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261," +
            "5262,5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277," +
            "5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293," +
            "5294,5295,5296,5297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309," +
            "5310,5311,5312,5313,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325," +
            "5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341," +
            "5342,5343,5344,5345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5358," +
            "5359,5360,5361,5362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5373,5374," +
            "5375,5376,5377,5378,5379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390," +
            "5391,5392,5393,5394,5395,5396,5397,5398,5399,5400,5401,5402,5405,5406,5407,5408," +
            "5409,5410,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424," +
            "5425,5426,5427,5428,5429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440," +
            "5441,5442,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456," +
            "5457,5458,5459,5460,5461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472," +
            "5473,5474,5475,5476,5477,5478,5479,5480,5481,5482,5483,5484,5485,5486,5487,5488," +
            "5489,5490,5491,5492,5493,5495,5496,5497,5499,5500,5501,5502,5504,5505,5506,5507," +
            "5508,5510,5511,5512,5513,5514,5515,5516,5517,5518,5519,5520,5521,5522,5523,5524," +
            "5525,5526,5527,5528,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540," +
            "5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552,5553,5554,5555,5556," +
            "5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5569,5570,5571,5572," +
            "5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5583,5584,5585,5586,5587,5588," +
            "5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600,5602,5603,5604,5609," +
            "5688,5746,5748,5749,5762,5764,5765,5766,5767,5768,5769,5770,5771,5775,5779,5780," +
            "5781,5784,5794,5795,5800,5801,5802,5803,5804,5805,5806,5807,5808,5809,5810,5811," +
            "5812,5813,5814,5815,5816,5817,5818,5822,5823,1300067,1300068,1300081,1300082,130" +
            "0105,1300106,1300107,1300108,1300125,1300174,1300228,1300229,1300304,1300305,130" +
            "0370,1300371,1300433,1300458,1300594,1300604,1300605,1300606,1300674,1300748,130" +
            "0749,1300750,1300799,1300873,1300943,1300948,1300999,1301014,1301042,1400001,140" +
            "0002,1400003,1400004,1400005,1400006,1400007,1400008,1400009,1400010,1400011,140" +
            "0012,1400013,1400014,1400015,1400016,1400017,1400018,1400019,1400020,1400021,140" +
            "0022,1400023,1400024,1400025,1400026,1400027,1400028,1400029,1400030,1400031,140" +
            "0032,1400033,1400034,1400035,1400036,1400037,1400038,1400039,1400040,1400041,140" +
            "0042,1400043,1400044,1400045,1400046,1400047,1400048,1400049,1400050,1400051,140" +
            "0052,1400053,1400054,1400055,1400056,1400057,1400058,1400059,1400060,1400061,140" +
            "0062,1400063,1400064,1400065,1400066,1400067,1400068,1400069,1400070,1400071,140" +
            "0072,1400073,1400074,1400075,1400076,1400077,1400078,1400079,1400080,1400081,140" +
            "0082,1400083,1400084,1400085,1400086,1400087,1400088,1400089,1400090,1400091,140" +
            "0092,1400093,1400094,1400095,1400096,1400097,1400098,1400099,1400100,1400101,140" +
            "0102,1400103,1400104,1400105,1400106,1400107,1400108,1400109,1400110,1400111,140" +
            "0112,1400113,1400114,1400115,1400116,1400117,1400118,1400119,1400120,1400121,140" +
            "0122,1400123,1400124,1400125,1400127,1400128,1400135,1400136,1400137,1400140,140" +
            "0144,1400145,1400146,1400147,1400151,1400152,1400154,1400156,1400157,1400162,140" +
            "0164,1400165,1400167,1400169,1400171,1400172,1400173,1400175,1400177,1400180,140" +
            "0184,1400186,1400188,1400190,1400191,1400192,1400196,1400197,1400198,1400199,140" +
            "0200,1400201,1400202,1400203,1400205,1400206,1400208,1400209,1400210,1400211,140" +
            "0215,1400216,1400217,1400218,1400219,1400221,1400222,1400223,1400226,1400227,140" +
            "0228,1400229,1400232,1400233,1400234,1400235,1400237,1400240,1400241,1400242,140" +
            "0243,1400244,1400245,1400248,1400251,1400254,1400255,1400256,1400257,1400258,140" +
            "0259,1400260,1400263,1400264,1400270,1400271,1400272,1400273,1400274,1400275,140" +
            "0276,1400277,1400278,1400279,1400282,1400285,1400289,1400290,1400291,1400292,140" +
            "0293,1400296,1400298,1400300,1400316,1400323,1400326,1400331,1400343,1400347,140" +
            "0350,1400353,1400355,1400357,1400358,1400366,1400368,1400370,1400373,1400376,140" +
            "0381,1400390,1400391,1400393,1400397,1400400,1400401,1400402,1400403,1400405,140" +
            "0406,1400407,1400408,1400418,1400423,1400424,1400425,1400426,1400428,1400429,140" +
            "0432,1400435,1400439,1400441,1400443,1400444,1400449,1400451,1400452,1400453,140" +
            "0456,1400458,1400459,1400462,1400463,1400466,1400476,1400477,1400484,1400485,140" +
            "0488,1400494,1400495,1400499,1400500,1400504,1400505,1400506,1400509,1400512,140" +
            "0513,1400515,1400518,1400521,1400524,1400526,1400529,1400533,1400538,1400550,140" +
            "0551,1400554,1400557,1400558,1400561,1400562,1400567,1400573,1400574,1400581,140" +
            "0585,1400586,1400590,1400591,1400597,1400598,1400602,1400603,1400609,1400610,140" +
            "0612,1400614,1400615,1400617,1400618,1400624,1400625,1400626,1400627,1400628,140" +
            "0629,1400630,1400631,1400632,1400633,1400637,1400638,1400643,1400647,1400648,140" +
            "0649,1400651,1400655,1400656,1400657,1400663,1400668,1400672,1400673,1400676,140" +
            "0677,2900512,290003788,")]
        public string SkinBlackList {
            get {
                return ((string)(this["SkinBlackList"]));
            }
            set {
                this["SkinBlackList"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{}")]
        public string SeerCloth {
            get {
                return ((string)(this["SeerCloth"]));
            }
            set {
                this["SeerCloth"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string BrowserFont {
            get {
                return ((string)(this["BrowserFont"]));
            }
            set {
                this["BrowserFont"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("976")]
        public decimal WinWidth {
            get {
                return ((decimal)(this["WinWidth"]));
            }
            set {
                this["WinWidth"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("624")]
        public decimal WinHeight {
            get {
                return ((decimal)(this["WinHeight"]));
            }
            set {
                this["WinHeight"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string AutoExecuteSoftwarePath1 {
            get {
                return ((string)(this["AutoExecuteSoftwarePath1"]));
            }
            set {
                this["AutoExecuteSoftwarePath1"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("998")]
        public int SkinRangeFloor {
            get {
                return ((int)(this["SkinRangeFloor"]));
            }
            set {
                this["SkinRangeFloor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2147483647")]
        public int SkinRangeCeiling {
            get {
                return ((int)(this["SkinRangeCeiling"]));
            }
            set {
                this["SkinRangeCeiling"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string RandomSkinExclusion {
            get {
                return ((string)(this["RandomSkinExclusion"]));
            }
            set {
                this["RandomSkinExclusion"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool IsUseSocketHack {
            get {
                return ((bool)(this["IsUseSocketHack"]));
            }
            set {
                this["IsUseSocketHack"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string AutoExecuteSoftwarePath2 {
            get {
                return ((string)(this["AutoExecuteSoftwarePath2"]));
            }
            set {
                this["AutoExecuteSoftwarePath2"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string AutoExecuteSoftwarePath3 {
            get {
                return ((string)(this["AutoExecuteSoftwarePath3"]));
            }
            set {
                this["AutoExecuteSoftwarePath3"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public string FlashZoom {
            get {
                return ((string)(this["FlashZoom"]));
            }
            set {
                this["FlashZoom"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\r\n  \"pve-出招-84\": {\r\n    \"c\": \"\",\r\n    \"s\": \"// 表姐、六界 弹伤，圣谱 补刀\\nWxSc.OnFirstRound" +
            " = () => {\\n  WxSc.帝皇之御 = 3512;\\n  WxSc.六界帝神 = 3329;\\n  WxSc.六界神王 = 3045;\\n  WxS" +
            "c.圣灵谱尼 = 5000;\\n  WxSc.Util.UseSkill(31505);\\n};\\n\\nWxSc.OnUseSkill = async (myS" +
            "killInfo) => {\\n  await WxSc.Util.DelayAsync(WxSc.Const.DelayMs);\\n  let petID =" +
            " WxSc.Util.GetFightingPetID();\\n  if (mySkillInfo.remainHP !== 0) {\\n    WxSc.Ut" +
            "il.UseSkill(mySkillInfo.skillList[0][0]);\\n  }\\n  else {\\n    let changePetIDArr" +
            "ay = [];\\n    if (WxSc.帝皇之御 === petID) { changePetIDArray.push(WxSc.六界帝神); chang" +
            "ePetIDArray.push(WxSc.六界神王); }\\n    else if (WxSc.六界神王 === petID || WxSc.六界帝神 ==" +
            "= petID) { changePetIDArray[0] = WxSc.圣灵谱尼; }\\n    WxSc.Util.ChangePetByID(chang" +
            "ePetIDArray);\\n  }\\n};\\n\\nWxSc.OnChangePet = (petInfo) => {\\n  let petID = petIn" +
            "fo.petID;\\n  if (WxSc.六界帝神 === petID || WxSc.六界神王 === petID) { WxSc.Util.UseSkil" +
            "l(19314); }\\n  else if (WxSc.圣灵谱尼 === petID) { WxSc.Util.UseSkill(31143); }\\n  e" +
            "lse { WxSc.Util.UseSkill(0); }\\n};\\n\\nWxSc.OnFightOver = () => {};\"\r\n  },\r\n  \"pv" +
            "e-出招-一直第一\": {\r\n    \"c\": \"\",\r\n    \"s\": \"WxSc.OnFirstRound = () => {\\n  let firstP" +
            "etCatchtime = WxSc.Util.GetFightingPetCatchTime();\\n  for (let pet of WxSc.Util." +
            "GetFightingPets()) {\\n    if (pet.catchTime === firstPetCatchtime) {\\n      WxSc" +
            ".Util.UseSkill(pet.skillArray[0]);\\n      break;\\n    }\\n  }\\n};\\n\\nWxSc.OnUseSk" +
            "ill = async (mySkillInfo) => {\\n  await WxSc.Util.DelayAsync(WxSc.Const.DelayMs)" +
            ";\\n  if (mySkillInfo.remainHP !== 0) {\\n    let skillList = mySkillInfo.skillLis" +
            "t;\\n    if (skillList[0][1] > 0) {\\n      WxSc.Util.UseSkill(skillList[0][0]);\\n" +
            "    }\\n    else {\\n      WxSc.Util.UsePetItem10PP();\\n    }\\n  }\\n  else {\\n    " +
            "WxSc.Util.ChangePetByID([]);\\n  }\\n};\\n\\nWxSc.OnChangePet = (petInfo) => {\\n  le" +
            "t skillList = petInfo.skillList;\\n  WxSc.Util.UseSkill(skillList[0][0]);\\n};\\n\\n" +
            "WxSc.OnFightOver = () => {};\"\r\n  },\r\n  \"pve-出招-一直第五\": {\r\n    \"c\": \"\",\r\n    \"s\": " +
            "\"// 适用于 pve，没有考虑 pvp 的复杂情况（例如被逐界苍星锁住技能）\\n// 如果上场的精灵有特殊的第五技能，就像武心婵那样，无法立刻使用的，请自行添" +
            "加代码处理\\nWxSc.OnFirstRound = () => {\\n  let firstPetCatchtime = WxSc.Util.GetFight" +
            "ingPetCatchTime();\\n  for (let pet of WxSc.Util.GetFightingPets()) {\\n    if (pe" +
            "t.catchTime === firstPetCatchtime) {\\n      WxSc.Util.UseSkill(pet.hideSKill ===" +
            " null ? pet.skillArray[0] : pet.hideSKill.id); // 若无第五，则用一技能\\n      break;\\n    " +
            "}\\n  }\\n};\\n\\nWxSc.OnUseSkill = async (mySkillInfo) => {\\n  await WxSc.Util.Dela" +
            "yAsync(WxSc.Const.DelayMs); // 出招间隔太短会掉线，默认是200ms\\n  let petID = WxSc.Util.GetFi" +
            "ghtingPetID();\\n  if (mySkillInfo.remainHP !== 0) {\\n    let skillList = mySkill" +
            "Info.skillList;\\n    let i = skillList.length < 5 ? 0 : 4;\\n    if (skillList[i]" +
            "[1] > 0) {\\n      WxSc.Util.UseSkill(skillList[i][0]);\\n    }\\n    else {\\n     " +
            " WxSc.Util.UsePetItem10PP();\\n    }\\n  }\\n  else {\\n    WxSc.Util.ChangePetByID(" +
            "[]);\\n  }\\n};\\n\\nWxSc.OnChangePet = (petInfo) => {\\n  let skillList = petInfo.sk" +
            "illList;\\n  WxSc.Util.UseSkill(skillList[skillList.length < 5 ? 0 : 4][0]);\\n};\\" +
            "n\\nWxSc.OnFightOver = () => {};\"\r\n  },\r\n  \"pve-出招-对战信息\": {\r\n    \"c\": \"\",\r\n    \"s" +
            "\": \"((fight) => {\\n  let originOnFirstRound = fight[\'OnFirstRound\'];\\n  fight[\'O" +
            "nFirstRound\'] = (fightStartInfo) => {\\n    console.log(`【${fightStartInfo.myInfo" +
            ".petName}】vs【${fightStartInfo.otherInfo.petName}】`);\\n    originOnFirstRound(fig" +
            "htStartInfo);\\n  }\\n\\n  let originUseSkill = fight[\'OnUseSkill\'];\\n  fight[\'OnUs" +
            "eSkill\'] = (mySkillInfo,enemySkillInfo,isMeFirst) => {\\n    console.log(`[${WxSc" +
            ".Util.GetRound()}] ${isMeFirst ? \'我\' : \'敌\'}方先手`);\\n    console.log(` 我方${(mySkil" +
            "lInfo.skillID===0 ? \'没有出招\' : \'使用技能 [\' + WxSc.Util.GetSkillNameByID(mySkillInfo.s" +
            "killID) + \']\')}`);\\n    console.log(` 敌方${(enemySkillInfo.skillID===0? \'没有出招\' : " +
            "\'使用技能 [\' + WxSc.Util.GetSkillNameByID(enemySkillInfo.skillID) + \']\')}`);\\n    or" +
            "iginUseSkill(mySkillInfo,enemySkillInfo,isMeFirst);\\n  }\\n\\n  let originChangePe" +
            "t = fight[\'OnChangePet\'];\\n  fight[\'OnChangePet\'] = (petInfo) => {\\n    console." +
            "log(`【${WxSc.Util.GetPetNameByID(petInfo.petID)}】登场`);\\n    originChangePet(petI" +
            "nfo);\\n  }\\n})(WxSc);\"\r\n  },\r\n  \"pve-出招-弹伤-蒂朵\": {\r\n    \"c\": \"\",\r\n    \"s\": \"// 草王" +
            "、蒂朵、克罗、六界 弹伤，1级时空 补刀\\n\\nWxSc.OnFirstRound = (fightStartInfo) => {\\n  WxSc.茉蕊儿 = " +
            "3322;\\n  WxSc.六界帝神 = 3329;\\n  WxSc.克罗 = 2977;\\n  WxSc.蒂朵 = 4377;\\n  WxSc.时空 = 34" +
            "63;\\n  WxSc.蒂朵首次上场 = true;\\n  WxSc.Util.UseSkill(0);\\n};\\n\\nWxSc.OnUseSkill = as" +
            "ync (mySkillInfo,enemySkillInfo) => {\\n  await WxSc.Util.DelayAsync(WxSc.Const.D" +
            "elayMs);\\n  let petID = WxSc.Util.GetFightingPetID();\\n  if (mySkillInfo.remainH" +
            "P !== 0) {\\n    WxSc.Util.UseSkill(0);\\n  }\\n  else {\\n    let ids = [];\\n    if" +
            " (WxSc.茉蕊儿 === petID || WxSc.克罗 === petID) { ids.push(WxSc.蒂朵); }\\n    else if (" +
            "WxSc.蒂朵 === petID) { ids.push(WxSc.六界帝神); }\\n    else if (WxSc.六界帝神 === petID) {" +
            " ids.push(WxSc.时空); }\\n    WxSc.Util.ChangePetByID(ids);\\n  }\\n};\\n\\nWxSc.OnChan" +
            "gePet = (petInfo) => {\\n  let petID = petInfo.petID;\\n  if (WxSc.蒂朵 === petID) {" +
            "\\n    if (WxSc.蒂朵首次上场) {\\n      WxSc.Util.ChangePetByID([WxSc.克罗]);\\n      WxSc." +
            "蒂朵首次上场 = false;\\n    } else {\\n      WxSc.Util.UseSkill(35914);\\n    }\\n  }\\n  e" +
            "lse if (WxSc.六界帝神 === petID) { WxSc.Util.UseSkill(19314); }\\n  else if (WxSc.时空 " +
            "=== petID) { WxSc.Util.UseSkill(31252); }\\n  else { WxSc.Util.UseSkill(0); }\\n};" +
            "\\n\\nWxSc.OnFightOver = (fightOverInfo) => {};\"\r\n  },\r\n  \"pve-出招-月华\": {\r\n    \"c\":" +
            " \"\",\r\n    \"s\": \"WxSc.OnFirstRound = () => {\\n  WxSc.阴晴圆缺 = 36354;\\n  WxSc.悲欢离合 =" +
            " 36353;\\n  WxSc.flag = true;\\n  WxSc.Util.UseSkill(WxSc.阴晴圆缺);\\n};\\n\\nWxSc.OnUse" +
            "Skill = async (mySkillInfo) => {\\n  await WxSc.Util.DelayAsync(WxSc.Const.DelayM" +
            "s); \\n  if (mySkillInfo.remainHP === 0) {\\n    console.log(\'GG!\');\\n    return;\\" +
            "n  }\\n  for (var skill of mySkillInfo.skillList) {\\n    if (skill[0] === WxSc.阴晴" +
            "圆缺) {\\n      if (skill[1] === 0) {\\n        WxSc.Util.UsePetItem10PP();\\n       " +
            " WxSc.flag = false;\\n        return;\\n      } else { break; }\\n    }\\n  }\\n  WxS" +
            "c.Util.UseSkill(WxSc.flag ? WxSc.悲欢离合 : WxSc.阴晴圆缺);\\n  WxSc.flag = !WxSc.flag;\\n" +
            "};\\n\\nWxSc.OnChangePet = () => {};\\nWxSc.OnFightOver = () => {};\"\r\n  },\r\n  \"pve-" +
            "压血\": {\r\n    \"c\": \"\",\r\n    \"s\": \"if (WxSc.Util.GetBag1().length > 0) {\\n  WxSc.On" +
            "FirstRound = () => { WxSc.Util.UseSkill(0); }\\n  WxSc.OnUseSkill = async (mySkil" +
            "lInfo) => {\\n    await WxSc.Util.DelayAsync(WxSc.Const.DelayMs);\\n    if (mySkil" +
            "lInfo.remainHP != 0) {\\n      WxSc.Util.UseSkill(0);\\n    }\\n    else {\\n      W" +
            "xSc.Util.ChangePetByID([]);\\n    }\\n  }\\n  WxSc.OnChangePet = () => { WxSc.Util." +
            "UseSkill(0); }\\n  WxSc.OnFightOver = () => {\\n    WxSc.Util.StopAutoFight();\\n  " +
            "  WxSc.Util.CurePet20HP();\\n  }\\n\\n  WxSc.Util.SetIsAutoCure(false);\\n  WxSc.Uti" +
            "l.LowHP();\\n}\\nelse {\\n  alert(\'没有出战精灵\');\\n}\"\r\n  },\r\n  \"pve-套装-漆黑-假面-吉光\": {\r\n   " +
            " \"c\": \"\",\r\n    \"s\": \"WxSc.Util.ChangeCloth([1301043,0,1301044,0,1301045,0,130104" +
            "6,0,1300954,0]);\\nWxSc.Util.SetTitle(272);\"\r\n  },\r\n  \"pve-套装-耀世-魔界-神话\": {\r\n    \"" +
            "c\": \"\",\r\n    \"s\": \"WxSc.Util.ChangeCloth([1300950,0,1300951,0,1300952,0,1300953," +
            "0,1300874,0]);\\nWxSc.Util.SetTitle(300);\"\r\n  },\r\n  \"pve-套装-银翼-假面-吉光\": {\r\n    \"c\"" +
            ": \"\",\r\n    \"s\": \"WxSc.Util.ChangeCloth([1300670,0,1300671,0,1300672,0,1300673,0," +
            "1300954,0]);\\nWxSc.Util.SetTitle(272);\"\r\n  },\r\n  \"pve-状态-因子1-保存\": {\r\n    \"c\": \"\"" +
            ",\r\n    \"s\": \"WxSc.Util.StateSave(\'因子1\')\"\r\n  },\r\n  \"pve-状态-因子1-更换\": {\r\n    \"c\": \"" +
            "\",\r\n    \"s\": \"WxSc.Util.StateLoadAsync(\'因子1\')\"\r\n  },\r\n  \"pve-状态-因子2-保存\": {\r\n    " +
            "\"c\": \"\",\r\n    \"s\": \"WxSc.Util.StateSave(\'因子2\')\"\r\n  },\r\n  \"pve-状态-因子2-更换\": {\r\n   " +
            " \"c\": \"\",\r\n    \"s\": \"WxSc.Util.StateLoadAsync(\'因子2\')\"\r\n  },\r\n  \"pve-状态-因子3-保存\": " +
            "{\r\n    \"c\": \"\",\r\n    \"s\": \"WxSc.Util.StateSave(\'因子3\')\"\r\n  },\r\n  \"pve-状态-因子3-更换\":" +
            " {\r\n    \"c\": \"\",\r\n    \"s\": \"WxSc.Util.StateLoadAsync(\'因子3\')\"\r\n  },\r\n  \"pve-状态-因子" +
            "4-保存\": {\r\n    \"c\": \"\",\r\n    \"s\": \"WxSc.Util.StateSave(\'因子4\')\"\r\n  },\r\n  \"pve-状态-因" +
            "子4-更换\": {\r\n    \"c\": \"\",\r\n    \"s\": \"WxSc.Util.StateLoadAsync(\'因子4\')\"\r\n  },\r\n  \"pv" +
            "e-状态-因子5-保存\": {\r\n    \"c\": \"\",\r\n    \"s\": \"WxSc.Util.StateSave(\'因子5\')\"\r\n  },\r\n  \"p" +
            "ve-状态-因子5-更换\": {\r\n    \"c\": \"\",\r\n    \"s\": \"WxSc.Util.StateLoadAsync(\'因子5\')\"\r\n  }," +
            "\r\n  \"pve-绿火\": {\r\n    \"c\": \"\",\r\n    \"s\": \"let FIRE_BLUE_SMALL = 2;\\nlet FIRE_PURP" +
            "LE_SMALL = 3;\\nlet FIRE_GOLD_SMALL = 4;\\nlet FIRE_GREEN_SMALL = 5;\\nlet FIRE_GRE" +
            "EN_BIG = 6;\\nlet FIRE_BLUE_BIG = 7;\\nlet FIRE_PURPLE_BIG = 8;\\nlet FIRE_GOLD_BIG" +
            " = 9;\\nif (await WxSc.Util.CopyFireAsync([FIRE_GREEN_SMALL])) {\\n  setTimeout(()" +
            " => {\\n    WxSc.Util.SimpleAlarm(\'火焰好像快失效了\');\\n  }, 10 * 60 * 1000);\\n}\"\r\n  },\r\n" +
            "  \"pve-金火\": {\r\n    \"c\": \"\",\r\n    \"s\": \"await WxSc.Util.CopyFireAsync([9,4]);\"\r\n " +
            " },\r\n  \"关卡-噬梦魔灵-第二关\": {\r\n    \"c\": \"\",\r\n    \"s\": \"// 打开开发者工具，在 console 页面查看指引\\n//" +
            " 制作过程视频：BV1fm8nexENV\\n\\nfunction getBit(p1, p2) { return (p1 >> (p2 - 1)) & 1; }" +
            "\\nfunction getByte(p1, p2) { return (p1 >> (8 * p2)) & 255; }\\n\\nasync function " +
            "getMapInfo(curMap) {\\n  let mapObj = {};\\n\\n  let arr = await WxSc.KTool.getMult" +
            "iValueAsync([\\n    103296 + (curMap - 1) / 4,\\n    103309 + curMap - 1,\\n    103" +
            "360 + (curMap - 1) / 32\\n  ]);\\n  arr[0] = getByte(arr[0], (curMap - 1) % 4);\\n " +
            " if (arr[0] < 5) {\\n    // 一共 4 种颜色的球，arr[0] 分别为 1 2 3 4 时，表示地图上有对应的球\\n    if (a" +
            "rr[0] > 0) {\\n      mapObj.ballType = arr[0];\\n    }\\n  }\\n  else if (arr[0] < 9" +
            ") {\\n    // 地图上有井，种类为 (arr[0] - 5)\\n    // 数值从 0 开始，与球的标号不同，但是按照顺序，颜色还是对应得上的\\n  " +
            "  mapObj.holeType = arr[0] - 5;\\n  }\\n  else {\\n    // 地图上有 NPC\\n  }\\n\\n  // 每张地" +
            "图都有 4 个门\\n  // doors 数组中，从左到右依次对应界面上显示的门\\n  // 0 表示此路不通\\n  // 其他数字，在不同的地图中相同数字的门" +
            "，表示互相连通\\n  mapObj.doors = [];\\n  for (let i = 1; i <= 4; ++i) {\\n    mapObj.door" +
            "s[i - 1] = getByte(arr[1], i - 1);\\n  }\\n\\n  return mapObj;\\n}\\n\\nasync function" +
            " findPath() {\\n  if (window.allMapInfo11813 === undefined) {\\n    window.allMapI" +
            "nfo11813 = [];\\n    for (let i = 1; i < 21; ++i) { window.allMapInfo11813.push(a" +
            "wait getMapInfo(i)); }\\n    console.log(\'世界地图\', window.allMapInfo11813);\\n  }\\n\\" +
            "n  // 当前地图\\n  let globalObj = {};\\n  let arr = await WxSc.KTool.getMultiValueAsy" +
            "nc([103294, 103295]);\\n  globalObj.curMap = arr[0] & 255; // 地图标号（一共 20 张地图，标号从 " +
            "1 开始）\\n  globalObj.curEnergy = arr[0] >> 8 & 255; // 灵魂能量\\n  globalObj.curHasBal" +
            "l = arr[0] >> 16 & 255;\\n  globalObj.hasTransferNum = arr[0] >> 24 & 255; // 已走过" +
            "的步数\\n\\n  globalObj.hasBall = []\\n  for (let i = 1; i <= 4; ++i) {\\n    if (getBi" +
            "t(arr[1], i) == 1) {\\n      globalObj.hasBall[i - 1] = 1;\\n    }\\n    else {\\n  " +
            "    globalObj.hasBall[i - 1] = 0;\\n    }\\n  }\\n\\n  globalObj.doors = window.allM" +
            "apInfo11813[globalObj.curMap - 1].doors;\\n\\n  // console.log(globalObj);\\n  cons" +
            "ole.log(`当前地图上，门的编号（从左到右）分别是：[${globalObj.doors.filter(door => door!=0).join(\' \'" +
            ")}]`);\\n  if (globalObj.curHasBall === 0) {\\n    console.log(\'寻找最近的球\');\\n    let" +
            " path = bfs(globalObj.curMap, m => (\'ballType\' in m && globalObj.hasBall[m.ballT" +
            "ype-1] === 0));\\n    if (path.length === 0) {\\n      console.log(\'请捡起当前地图上的球\');\\" +
            "n    }\\n    else if (path.length > window.allMapInfo11813.length) {\\n      conso" +
            "le.log(\'剩下的球无法获取，请先耗尽灵魂能量，重置关卡\');\\n    }\\n    else {\\n      console.log(`请进入 ${p" +
            "ath[0]} 号门`);\\n    }\\n  }\\n  else {\\n    console.log(\'寻找井\');\\n    let path = bfs" +
            "(globalObj.curMap, m => (\'holeType\' in m && m.holeType === globalObj.curHasBall-" +
            "1));\\n    if (path.length === 0) {\\n      console.log(\'请将球投入当前地图上的井\');\\n    }\\n " +
            "   else if (path.length > window.allMapInfo11813.length) {\\n      console.log(\'剩" +
            "下的井所在位置无法到达，请先耗尽灵魂能量，重置关卡\');\\n    }\\n    else {\\n      console.log(`请进入 ${path[0" +
            "]} 号门`);\\n    }\\n  }\\n}\\n\\nfunction bfs(curMap, predicate) {\\n  let visited = (n" +
            "ew Array(window.allMapInfo11813.length)).fill(null); // 记录路径\\n  let queue = [];\\" +
            "n  queue.push(curMap-1);\\n  visited[curMap-1] = [];\\n\\n  while (queue.length > 0" +
            ") {\\n    let cur = queue.shift();\\n    if (predicate(window.allMapInfo11813[cur]" +
            ")) {\\n      return visited[cur];\\n    }\\n    for (let door of window.allMapInfo1" +
            "1813[cur].doors) {\\n      if (door === 0) continue;\\n      // 若两个地图有相同编号的门，则说明这两" +
            "个地图相互连通\\n      for (let i = 0; i < window.allMapInfo11813.length; ++i) {\\n      " +
            "  if (i === cur || visited[i] != null) continue;\\n        if (window.allMapInfo1" +
            "1813[i].doors.indexOf(door) != -1) {\\n          queue.push(i);\\n          visite" +
            "d[i] = visited[cur].concat([door]);\\n        }\\n      }\\n    }\\n  }\\n  return ne" +
            "w Array(window.allMapInfo11813.length+1);\\n}\\n\\nconsole.log(\'=====\');\\nawait fin" +
            "dPath();\"\r\n  },\r\n  \"关卡-暗黑托鲁克\": {\r\n    \"c\": \"\",\r\n    \"s\": \"// 需要有精灵：3437 艾欧丽娅（携带技" +
            "能疾击之刺、第五技能侍君奉此生）\\nfunction ReadInt(data) { return (data.byteArray[data.position+" +
            "+] << 24) + (data.byteArray[data.position++] << 16) + (data.byteArray[data.posit" +
            "ion++] << 8) + data.byteArray[data.position++]; }\\n\\nconst 艾欧丽娅 = 3437;\\nconst 疾" +
            "击之刺 = 31114;\\nconst 侍君奉此生 = 31117;\\nlet bag1 = WxSc.Util.GetBag1();\\nlet bag2 = " +
            "WxSc.Util.GetBag2();\\nlet pets = await WxSc.Util.GetStoragePetsAsync();\\npets = " +
            "pets.filter(pet => pet.id===艾欧丽娅);\\nif (pets.length===0) {\\n  // 再看看背包里有没有\\n  pe" +
            "ts = bag1.concat(bag2).filter(pet => pet.id===艾欧丽娅);\\n  if (pets.length===0) {\\n" +
            "    alert(\'未找到艾欧丽娅，任务终止\');\\n    return;\\n  }\\n}\\nawait WxSc.Util.SetPetBagAsync(" +
            "[pets[0].catchTime]);\\nlet petInfo = WxSc.Util.GetBagPetInfos()[0];\\nif (petInfo" +
            ".skillArray.filter(sk => sk.id===疾击之刺).length===0) {\\n  alert(\'【艾欧丽娅】没有搭配技能【疾击之刺" +
            "】，任务终止\');\\n  return;\\n}\\nif (petInfo.hideSKill.id!==侍君奉此生) {\\n  alert(\'【艾欧丽娅】没有搭" +
            "配技能【侍君奉此生】，任务终止\');\\n  return;\\n}\\n\\nWxSc.Util.SimpleAlarm(\'崩塌吧！天空之城！\');\\nWxSc.Ut" +
            "il.SetIsHidePetFight(true);\\n\\n// 发起战斗\\nlet fightWithTlk = (region) => {\\n  retu" +
            "rn new Promise(res => {\\n    WxSc.OnFightOver = (overInfo) => {\\n      res (over" +
            "Info.winnerID != 0);\\n    }\\n    WxSc.Util.Send(41129, region);\\n  });\\n}\\n\\nwhi" +
            "le (true) {\\n  // 剩余挑战次数\\n  let arr = await WxSc.KTool.getMultiValueAsync([12045" +
            ",2065]);\\n  if (3 - arr[0] + arr[1] === 0) break;\\n  // console.log(\'新一轮挑战\');\\n " +
            " for (let i = 0; i < 6; ++i) {\\n    let data = {};\\n    data.byteArray = await W" +
            "xSc.Util.SendAsync(47087, []); // SKY_CITY_GET_BOSS_REGION\\n    data.position = " +
            "0;\\n    let region = ReadInt(data);\\n    if (region === 251) {\\n      // 真身\\n   " +
            "   // 出招\\n      WxSc.OnFirstRound = () => WxSc.Util.UseSkill(侍君奉此生);\\n      WxSc" +
            ".OnUseSkill = async (mySkillInfo) => {\\n        await WxSc.Util.DelayAsync(200);" +
            "\\n        WxSc.Util.UseSkill(侍君奉此生);\\n      }\\n      let isWin = await fightWith" +
            "Tlk(region);\\n      // console.log(`对战真身，${isWin?\'胜利\':\'失败\'}`);\\n      // 失败后的情况有" +
            "点奇怪，没看明白，就不处理了\\n      await WxSc.Util.DelayAsync(5000);\\n      break;\\n    }\\n  " +
            "  else {\\n      // 出招\\n      WxSc.OnFirstRound = () => WxSc.Util.UseSkill(疾击之刺);" +
            "\\n      WxSc.OnUseSkill = async (mySkillInfo) => {\\n        await WxSc.Util.Dela" +
            "yAsync(200);\\n        WxSc.Util.UseSkill(疾击之刺);\\n      }\\n      let isWin = awai" +
            "t fightWithTlk(region);\\n      // console.log(`对战分身，${isWin?\'胜利\':\'失败\'}`);\\n     " +
            " await WxSc.Util.DelayAsync(5000);\\n    }\\n  }\\n}\\n\\nlet items = await WxSc.Item" +
            "Manager.updateItemsAsync([1700364,1700365]);\\nlet 黑暗之羽 = 0, 魔化之心 = 0;\\nfor (cons" +
            "t item of items) {\\n  switch (item.itemID) {\\n    case 1700364:\\n      黑暗之羽 = it" +
            "em.itemNum;\\n      break;\\n    case 1700365:\\n      魔化之心 = item.itemNum;\\n      " +
            "break;\\n  }\\n}\\nif (魔化之心<100 && 黑暗之羽>150) {\\n  // 合成\\n  while (黑暗之羽 >= 150) {\\n " +
            "   WxSc.Util.Send(2901, 1768);\\n    黑暗之羽 -= 50;\\n    魔化之心;\\n  }\\n}\\nWxSc.Util.St" +
            "opAutoFight();\\nWxSc.Util.SetIsHidePetFight(false);\\n// 恢复背包\\nawait WxSc.Util.Se" +
            "tPetBagAsync(bag1.map(pet => pet.catchTime),bag2.map(pet => pet.catchTime));\\nif" +
            " (黑暗之羽>=100 && 魔化之心>=100) {\\n  alert(\'可以去地图965领取精灵了\');\\n}\\nelse {\\n  WxSc.Util.S" +
            "impleAlarm(`当前进度：${黑暗之羽}/100 | ${魔化之心}/100`);\\n}\\n\\n// 参考资料：\\n// https://seer.61" +
            ".com/module/com/robot/module/app/BlackBulukeMainPanel.swf\\n// https://seer.61.co" +
            "m/dll/RobotAppDLL.swf\\n// https://seer.61.com/dll/PetFightDLL_201308.swf\\n// com" +
            ".robot.app.task.control.TianKongZhiChengController\\n// com.robot.app2.control.Bl" +
            "ackTuolukeGame\"\r\n  },\r\n  \"日常-通行证-养成任务\": {\r\n    \"c\": \"\",\r\n    \"s\": \"let bag1 = Wx" +
            "Sc.Util.GetBag1();\\nlet bag2 = WxSc.Util.GetBag2();\\nlet pets = await WxSc.Util." +
            "GetStoragePetsAsync();\\n// 从仓库取出一只 皮皮\\npets = pets.filter(pet => pet.id===10);\\n" +
            "if (pets.length === 0) {\\n  pets = bag1.concat(bag2).filter(pet => pet.id===10);" +
            "\\n  if (pets.length === 0) WxSc.Util.SimpleAlarm(\'没有精灵皮皮，任务失败\');\\n}\\nlet ct = pe" +
            "ts[0].catchTime;\\nawait WxSc.Util.SetPetBagAsync([ct]);\\n// 性格\\nWxSc.Util.Send(2" +
            "326,ct,300070);\\n// 恢复背包\\nawait WxSc.Util.SetPetBagAsync(bag1.map(pet => pet.cat" +
            "chTime),bag2.map(pet => pet.catchTime));\\n// 领奖\\nWxSc.Util.Send(41916,1,3);\\nWxS" +
            "c.Util.SimpleAlarm(\'ok\');\"\r\n  },\r\n  \"状态-pvp-保存\": {\r\n    \"c\": \"\",\r\n    \"s\": \"WxSc" +
            ".Util.StateSave(\'pvp\')\"\r\n  },\r\n  \"状态-pvp-更换\": {\r\n    \"c\": \"\",\r\n    \"s\": \"WxSc.Ut" +
            "il.StateLoadAsync(\'pvp\')\"\r\n  },\r\n  \"状态-日常-保存\": {\r\n    \"c\": \"\",\r\n    \"s\": \"WxSc.U" +
            "til.StateSave(\'日常\')\"\r\n  },\r\n  \"状态-日常-更换\": {\r\n    \"c\": \"\",\r\n    \"s\": \"WxSc.Util.S" +
            "tateLoadAsync(\'日常\')\"\r\n  },\r\n  \"因子-id测试\": {\r\n    \"c\": \"\",\r\n    \"s\": \"const id = 3" +
            "4;\\n\\nWxSc.Refl.Tmp(\'com.robot.core.config.xml.NewSuperdesignXmlInfo\', \'getRewar" +
            "dInfoById\', \'rewardInfo\', false,id);\\nWxSc.Util.SimpleAlarm(WxSc.Util.GetPetName" +
            "ByID(WxSc.Dict.Get(\'rewardInfo\', \'MonsterID\')))\\n\"\r\n  },\r\n  \"因子-简单模式\": {\r\n    \"c" +
            "\": \"\",\r\n    \"s\": \"const 自动兑换 = true; // 默认自动兑换，如果不想自动兑换，将true改成false\\n\\nlet CONF" +
            "IGS = [\\n  {\\n    id: 195, // 绮芒·蝠迪\\n    strategies: [\\n      {\\n        clothes" +
            ": [1301043,0,1301044,0,1301045,0,1301046,0,1300954,0], // 漆黑天使套装 + 倒吊的假面\\n      " +
            "  title: 272, // 吉光凤羽称号\\n        pets: [[4648,5000], [2727,2735,3409,3519]], // " +
            "出战：星光·鲁斯王、圣谱。备战：西游\\n        skill: () => 一直第五,\\n      },\\n      { skill: () => 一" +
            "直第五 }, // 没有设置 clothes 等属性，表示沿用上一关的套装、阵容\\n      { skill: () => 一直第五 },\\n      { " +
            "skill: () => 一直第五 },\\n      {\\n        // 仅作示例，这关不建议使用这种打法，因为运气不好可能要耗几千回合\\n     " +
            "   clothes: [1300950,0,1300951,0,1300952,0,1300953,0,1300874,0], // 耀世战铠 + 魔界之风目" +
            "镜\\n        title: 300, // 神话称号\\n        pets: [[4487], [2727,2735,3409,3519]], /" +
            "/ 出战：希可洛。备战：西游\\n        skill: () => 一直第一, // 奇镰解放（一般都是把这个技能放首位的吧）\\n      },\\n  " +
            "  ]\\n  },\\n  {\\n    id: 198, // 星光·纳多雷\\n    扫荡: 7, // 简单：5；困难：6；地狱：7；\\n  },\\n];\\" +
            "n\\nconst 一直第五 = () => {\\n  WxSc.OnFirstRound = () => {\\n    let firstPetCatchtim" +
            "e = WxSc.Util.GetFightingPetCatchTime();\\n    for (let pet of WxSc.Util.GetFight" +
            "ingPets()) {\\n      if (pet.catchTime === firstPetCatchtime) {\\n        WxSc.Uti" +
            "l.UseSkill(pet.hideSKill === null ? pet.skillArray[0] : pet.hideSKill.id); // 若无" +
            "第五，则用一技能\\n        break;\\n      }\\n    }\\n  };\\n\\n  WxSc.OnUseSkill = async (myS" +
            "killInfo) => {\\n    await WxSc.Util.DelayAsync(WxSc.Const.DelayMs); // 出招间隔太短会掉线" +
            "，默认是200ms\\n    let petID = WxSc.Util.GetFightingPetID();\\n    if (mySkillInfo.re" +
            "mainHP !== 0) {\\n      let skillList = mySkillInfo.skillList;\\n      let i = ski" +
            "llList.length < 5 ? 0 : 4;\\n      if (skillList[i][1] > 0) {\\n        WxSc.Util." +
            "UseSkill(skillList[i][0]);\\n      }\\n      else {\\n        WxSc.Util.UsePetItem1" +
            "0PP();\\n      }\\n    }\\n    else {\\n      WxSc.Util.ChangePetByID([]);\\n    }\\n " +
            " };\\n\\n  WxSc.OnChangePet = (petInfo) => {\\n    let skillList = petInfo.skillLis" +
            "t;\\n    WxSc.Util.UseSkill(skillList[skillList.length < 5 ? 0 : 4][0]);\\n  };\\n}" +
            "\\n\\nconst 一直第一 = () => {\\n  WxSc.OnFirstRound = () => {\\n    let firstPetCatchti" +
            "me = WxSc.Util.GetFightingPetCatchTime();\\n    for (let pet of WxSc.Util.GetFigh" +
            "tingPets()) {\\n      if (pet.catchTime === firstPetCatchtime) {\\n        WxSc.Ut" +
            "il.UseSkill(pet.skillArray[0]);\\n        break;\\n      }\\n    }\\n  };\\n\\n  WxSc." +
            "OnUseSkill = async (mySkillInfo) => {\\n    await WxSc.Util.DelayAsync(WxSc.Const" +
            ".DelayMs);\\n    let petID = WxSc.Util.GetFightingPetID();\\n    if (mySkillInfo.r" +
            "emainHP !== 0) {\\n      let skillList = mySkillInfo.skillList;\\n      let i = 0;" +
            "\\n      if (skillList[i][1] > 0) {\\n        WxSc.Util.UseSkill(skillList[i][0]);" +
            "\\n      }\\n      else {\\n        WxSc.Util.UsePetItem10PP();\\n      }\\n    }\\n  " +
            "  else {\\n      WxSc.Util.ChangePetByID([]);\\n    }\\n  };\\n\\n  WxSc.OnChangePet " +
            "= (petInfo) => {\\n    let skillList = petInfo.skillList;\\n    WxSc.Util.UseSkill" +
            "(skillList[0][0]);\\n  };\\n}\\n\\nfunction ReadByte(data) { return data.byteArray[d" +
            "ata.position++]; }\\n\\nconst changeBagByIDs = async (ids) => {\\n  const bag1 = Wx" +
            "Sc.Util.GetBag1();\\n  const bag2 = WxSc.Util.GetBag2();\\n  let allPet = await Wx" +
            "Sc.Util.GetStoragePetsAsync();\\n  allPet = allPet.concat(bag1, bag2);\\n  let cat" +
            "chTimes = [];\\n  catchTimes.push([]);\\n  for (const id of ids[0]) {\\n    let tar" +
            "gets = allPet.filter(pet => pet.id === id);\\n    if (targets.length === 0) {\\n  " +
            "    throw new Error(`找不到 ID 为 ${id} 的宠物`);\\n    }\\n    catchTimes[0].push(target" +
            "s[0].catchTime);\\n  }\\n  if (ids[1] !== undefined) {\\n    catchTimes.push([]);\\n" +
            "    for (const id of ids[1]) {\\n      let targets = allPet.filter(pet => pet.id " +
            "=== id);\\n      if (targets.length === 0) {\\n        throw new Error(`找不到 ID 为 $" +
            "{id} 的宠物`);\\n      }\\n      catchTimes[1].push(targets[0].catchTime);\\n    }\\n  " +
            "}\\n  await WxSc.Util.SetPetBagAsync(...catchTimes);\\n}\\n\\nconst fightWithEasyBos" +
            "s = (id) => {\\n  return new Promise(async res => {\\n    WxSc.OnFightOver = (over" +
            "Info) => {\\n      res (overInfo.winnerID != 0);\\n    }\\n    let data = {}\\n    d" +
            "ata.byteArray = await WxSc.Util.SendAsync(41282, [id,1]);\\n    data.position = 0" +
            ";\\n    const fightCode = ReadByte(data);\\n    if (fightCode != 0) {\\n      alert" +
            "(`发起战斗 ${id} 失败，错误码：${fightCode}`);\\n      throw new Error(\'\');\\n    }\\n  });\\n}" +
            "\\n\\nawait WxSc.Util.StateSave(\'简单因子\');\\n\\nWxSc.Util.SetIsHidePetFight(true);\\nco" +
            "nst NewSuperdesignXmlInfo = \'com.robot.core.config.xml.NewSuperdesignXmlInfo\';\\n" +
            "const SpiritFragmentXmlInfo = \'com.robot.core.config.xml.SpiritFragmentXmlInfo\';" +
            "\\nconst KEY_REWARD_INFO = \'rewardInfo\';\\nfor (const config of CONFIGS) {\\n  // 基" +
            "本信息\\n  WxSc.Refl.Tmp(NewSuperdesignXmlInfo, \'getRewardInfoById\', KEY_REWARD_INFO" +
            ", false,config.id);\\n  const MOSTER_ID = WxSc.Dict.Get(KEY_REWARD_INFO, \'Monster" +
            "ID\');\\n  const BOSS_NAME = WxSc.Util.GetPetNameByID(MOSTER_ID);\\n  const _config" +
            "ureInfo = WxSc.Refl.Func(NewSuperdesignXmlInfo, \'getConfigureInfoById\', false,co" +
            "nfig.id);\\n\\n  // 兑换\\n  const itemId = WxSc.Dict.Get(KEY_REWARD_INFO, \'ItemID\')\\" +
            "n  const items = await WxSc.ItemManager.updateItemsAsync([itemId])\\n  if (自动兑换 &" +
            "& items.length > 0 && items[0].itemNum >= WxSc.Refl.Func(SpiritFragmentXmlInfo,\'" +
            "getTotalNum\', false,MOSTER_ID)) {\\n    const bag1 = WxSc.Util.GetBag1();\\n    co" +
            "nst bag2 = WxSc.Util.GetBag2();\\n    WxSc.Util.Send(41413,items[0].itemID,1,0); " +
            "// 精灵\\n    await WxSc.Util.DelayAsync(2000);\\n    try {\\n      await changeBagBy" +
            "IDs([[MOSTER_ID]]);\\n      WxSc.Util.Send(41413,items[0].itemID,2,0);\\n      WxS" +
            "c.Util.Send(41413,items[0].itemID,3,0);\\n      alert(`【${BOSS_NAME}】 已兑换`);\\n   " +
            " } catch (e) {\\n      alert(`【${BOSS_NAME}】 兑换出错，可能需要精灵的前置形态`);\\n    }\\n    // 恢" +
            "复背包\\n    await WxSc.Util.SetPetBagAsync(bag1.map(pet => pet.catchTime),bag2.map(" +
            "pet => pet.catchTime));\\n    continue;\\n  }\\n\\n  if (config.扫荡 !== undefined) {\\" +
            "n    for (let i=0; i<3; ++i) WxSc.Util.Send(41283, config.id,config.扫荡);\\n    co" +
            "ntinue;\\n  }\\n  \\n  let va = await WxSc.KTool.getMultiValueAsync([_configureInfo" +
            ".ProgressValue, _configureInfo.TimeValue]);\\n  let _curlv = WxSc.KTool.subByte(v" +
            "a[0], 16, 8); // 数值为 0、1、2、3、4\\n  let levelNum = WxSc.KTool.subByte(va[0], 8, 8)" +
            "; // 难度（简单模式是 1）\\n  let _surplusNum = _configureInfo.Times - va[1]; // 剩余轮数\\n  i" +
            "f (_curlv != 0 || levelNum != 0) ++_surplusNum;\\n  for (let i = 0; i < _surplusN" +
            "um; i++) {\\n    do {\\n      const index = _curlv;\\n      if (config.strategies[i" +
            "ndex].clothes !== undefined) {\\n        WxSc.Util.ChangeCloth(config.strategies[" +
            "index].clothes);\\n      }\\n      if (config.strategies[index].title!== undefined" +
            ") {\\n        WxSc.Util.SetTitle(config.strategies[index].title);\\n      }\\n     " +
            " if (config.strategies[index].pets !== undefined) {\\n        await changeBagByID" +
            "s(config.strategies[index].pets);\\n      }\\n      config.strategies[index].skill" +
            "()();\\n      const win = await fightWithEasyBoss(config.id);\\n      WxSc.Util.Si" +
            "mpleAlarm(`【${BOSS_NAME}】 ${_curlv} ${win ? \'胜利\' : \'失败\'}`);\\n      await WxSc.Ut" +
            "il.DelayAsync(16000);\\n      va = await WxSc.KTool.getMultiValueAsync([_configur" +
            "eInfo.ProgressValue]);\\n      _curlv = WxSc.KTool.subByte(va[0], 16, 8);\\n      " +
            "levelNum = WxSc.KTool.subByte(va[0], 8, 8);\\n    } while (_curlv != 0 || levelNu" +
            "m != 0);\\n  }\\n}\\nWxSc.Util.SetIsHidePetFight(false);\\n\\n// 恢复背包、套装、称号\\nawait Wx" +
            "Sc.Util.StateLoadAsync(\'简单因子\');\\nconsole.log(\'因子任务完成\')\\n\\n// 参考：\\n// https://see" +
            "r.61.com/module/com/robot/module/app/SpetBaseLvPanel.swf\\n// https://seer.61.com" +
            "/module/com/robot/module/app/SpetBaseBattlePanel.swf\\n// https://seer.61.com/mod" +
            "ule/com/robot/module/app/SpetYiMangFuDiMainPanel.swf\\n// https://seer.61.com/dll" +
            "/RobotCoreDLL.swf\"\r\n  },\r\n  \"杂项-刻印仓库\": {\r\n    \"c\": \"\",\r\n    \"s\": \"function ReadI" +
            "nt(data) { return (data.byteArray[data.position++] << 24) + (data.byteArray[data" +
            ".position++] << 16) + (data.byteArray[data.position++] << 8) + data.byteArray[da" +
            "ta.position++]; }\\n\\nasync function GetBagCountmarkAsync() {\\n  const cmdID = 46" +
            "160; // QUERY_COUNTMARK_BY_TYPE_PAGE\\n  const batchSize = 100;\\n  let startID = " +
            "0;\\n  const keyFuncParse = \'marks\', keyResult = \'markRes\', keySocketEvent = \'soc" +
            "ketEvent\', keyByteArray = \'markBA\', keyCountermarkInfo = \'CountermarkInfo\', keyA" +
            "llMark = \'allMark\';\\n  WxSc.Dict.Add(keyAllMark,\'Array\');\\n  while (true) {\\n   " +
            " const markNum = await new Promise(res => {\\n      WxSc.Dict.AddCall(keyFuncPars" +
            "e,keyResult,() => {\\n        // 接收到的参数会存放到 keyResult 数组中\\n        // 这里将接收到的 返回值" +
            "数组 的 第一个成员（下标为 0，类型为 SocketEvent）的 data 属性（类型为 ByteArray）转存到 keyByteArray 中，后续就能" +
            "作为参数传递给 CountermarkInfo 的构造函数\\n        WxSc.Dict.TmpAttrib(keyResult, \'0\', keySo" +
            "cketEvent);\\n        WxSc.Dict.TmpAttrib(keySocketEvent, \'data\', keyByteArray);\\" +
            "n        WxSc.Dict.Set(keyByteArray,\'position\',false,0);\\n        const num = Wx" +
            "Sc.Dict.Func(keyByteArray,\'readUnsignedInt\') / 14;\\n        for (let i = 0; i < " +
            "num; i++) {\\n          WxSc.Dict.Add(keyCountermarkInfo, \'com.robot.core.info.us" +
            "erItem.CountermarkInfo\', true, keyByteArray);\\n          WxSc.Dict.Func(keyAllMa" +
            "rk,\'push\',true,keyCountermarkInfo);\\n        }\\n        WxSc.Dict.Del(keyFuncPar" +
            "se);\\n        WxSc.Dict.Del(keyResult);\\n        WxSc.Dict.Del(keySocketEvent);\\" +
            "n        WxSc.Dict.Del(keyByteArray);\\n        WxSc.Dict.Del(keyCountermarkInfo)" +
            ";\\n        res(num);\\n      });\\n      WxSc.Refl.Func(\'com.robot.core.net.Socket" +
            "Connection\',\'sendByQueue\',false,cmdID, false,[1, 1, startID, batchSize], true,ke" +
            "yFuncParse);\\n    });\\n    if (markNum < batchSize) break;\\n    startID += batch" +
            "Size;\\n    await WxSc.Util.DelayAsync(100);\\n  }\\n  const result = WxSc.Dict.Get" +
            "(keyAllMark);\\n  WxSc.Dict.Del(keyAllMark);\\n  return result;\\n}\\n\\nconst arr = " +
            "await GetBagCountmarkAsync();\\nfor (let i = 0; i < 10; ++i) {\\n  console.log(arr" +
            "[i]);\\n}\"\r\n  },\r\n  \"杂项-野生精灵\": {\r\n    \"c\": \"\",\r\n    \"s\": \"WxSc.OnFirstRound = () " +
            "=> {\\n  // 对战首回合，使用特殊胶囊捕捉\\n  WxSc.Util.Send(2409,300505);\\n  WxSc.Util.ItemBuy(3" +
            "00505);\\n}\\n(() => {\\n  const 闪光皮皮 = 164, keyFunc = \'catch\', keyResult = \'catchR" +
            "es\', SocketConnection = \'com.robot.core.net.SocketConnection\', MAP_OGRE_LIST = 2" +
            "004;\\n  try {\\n    WxSc.Refl.Func(SocketConnection,\'removeCmdListener\',false,MAP" +
            "_OGRE_LIST,true,keyFunc); // 防止重复\\n  } catch (e) {}\\n  WxSc.Dict.AddCall(keyFunc" +
            ",keyResult,() => {\\n    // 接收到的参数会存放到 keyResult 数组中，这里需要的是第一个参数（下标为 0），类型为 Socke" +
            "tEvent\\n    WxSc.Dict.Set(keyResult,\'0.data.position\',false,0);\\n    for (let i " +
            "= 0; i < 9; i++) {\\n      let o = WxSc.Dict.Func(keyResult,\'0.data.readUnsignedI" +
            "nt\');\\n      if (o === 闪光皮皮) {\\n        WxSc.Refl.Func(\'com.robot.app.fight.Figh" +
            "tManager\',\'fightWithNpc\',false,i);\\n        return;\\n      }\\n    }\\n    WxSc.Ut" +
            "il.SimpleAlarm(\'等待\');\\n  });\\n  WxSc.Refl.Func(SocketConnection,\'addCmdListener\'" +
            ",false,MAP_OGRE_LIST,true,keyFunc);\\n})()\\nWxSc.Util.ChangeMap(10); // 克洛斯星\"\r\n  " +
            "},\r\n  \"杂项-杰丹\": {\r\n    \"c\": \"\",\r\n    \"s\": \"const catchNum = 5;\\nlet caughtNum = 0" +
            ";\\nlet onePetCt;\\nconst infos = WxSc.Util.GetBagPetInfos();\\nif (infos.length ==" +
            "= 0) {\\n  // 从仓库中随便找出一个精灵\\n  const pets = await WxSc.Util.GetStoragePetsAsync();" +
            "\\n  if (pets.length === 0) {\\n    alert(\'获取仓库精灵失败，已停止运行\');\\n    return;\\n  }\\n  " +
            "onePetCt = pets[0].catchTime;\\n  await WxSc.Util.SetPetBagAsync([onePetCt]);\\n}\\" +
            "nelse if (infos.length != 1) {\\n  // 开始时背包只留一个精灵\\n  onePetCt = infos[0].catchTim" +
            "e;\\n  await WxSc.Util.SetPetBagAsync([onePetCt]);\\n}\\n\\n// 获取胶囊数量\\nconst item = " +
            "await WxSc.ItemManager.updateItemsAsync([300505]);\\nif (item.length === 0) {\\n  " +
            "for (let i = 0; i < 6; i++) {\\n    WxSc.Util.ItemBuy(300505); \\n  }\\n}\\n\\nconst " +
            "PET_ID = 632;\\nconst keyFunc = \'catch\', keyResult = \'catchRes\', SocketConnection" +
            " = \'com.robot.core.net.SocketConnection\', MAP_OGRE_LIST = 2004, PetManager = \'co" +
            "m.robot.core.manager.PetManager\';\\n\\nWxSc.OnFirstRound = async () => {\\n  // 对战首" +
            "回合，使用特殊胶囊捕捉\\n  WxSc.Util.Send(2409,300505);\\n  WxSc.Util.ItemBuy(300505);\\n}\\n\\n" +
            "WxSc.Util.SetIsHidePetFight(true); // 隐藏战斗界面\\n\\n(() => {\\n  const keyFunc2409 = " +
            "\'catch2409\', keyResult2409 = \'catchRes2409\';\\n  try {\\n    WxSc.Refl.Func(Socket" +
            "Connection,\'removeCmdListener\',false,MAP_OGRE_LIST,true,keyFunc); // 防止重复\\n    W" +
            "xSc.Refl.Func(SocketConnection,\'removeCmdListener\',false,2409,true,keyFunc2409);" +
            "\\n  } catch (e) {}\\n  WxSc.Dict.AddCall(keyFunc,keyResult, async () => {\\n    //" +
            " 接收到的参数会存放到 keyResult 数组中，这里需要的是第一个参数（下标为 0），类型为 SocketEvent\\n    WxSc.Dict.Set(" +
            "keyResult,\'0.data.position\',false,0);\\n    for (let i = 0; i < 9; i++) {\\n      " +
            "let o = WxSc.Dict.Func(keyResult,\'0.data.readUnsignedInt\');\\n      if (o === PET" +
            "_ID) {\\n        WxSc.Refl.Func(\'com.robot.app.fight.FightManager\',\'fightWithNpc\'" +
            ",false,i);\\n        return;\\n      }\\n    }\\n    WxSc.Util.SimpleAlarm(\'等待\');\\n " +
            " });\\n  WxSc.Refl.Func(SocketConnection,\'addCmdListener\',false,MAP_OGRE_LIST,tru" +
            "e,keyFunc);\\n  \\n  WxSc.Dict.AddCall(keyFunc2409,keyResult2409, async () => {\\n " +
            "   const newPetCt = WxSc.Dict.Get(keyResult2409,\'0.data.catchTime\');\\n    // 放入背" +
            "包后，自动开启特性\\n    WxSc.Util.Send(2304, newPetCt,1); // PET_RELEASE\\n    WxSc.Refl.F" +
            "unc(PetManager,\'upDateByOnce\'); // 更新精灵信息\\n    await WxSc.Util.DelayAsync(2400);" +
            "\\n    const infos = WxSc.Util.GetBagPetInfos();\\n    for (let info of infos) {\\n" +
            "      if (info.catchTime === newPetCt) {\\n        if (info.effectList.length ===" +
            " 0) {\\n          alert(\'开启特性失败，已停止运行\');\\n          throw new Error(\'开启特性失败\');\\n " +
            "       }\\n        if (info.effectList[0].effectID === 6 && (info.effectList[0].a" +
            "rgs === \'0 3\' || info.effectList[0].args === \'6 3\')) {\\n          // 带电 阴森\\n    " +
            "      console.log(\'+1\');\\n          if (++caughtNum === catchNum) {\\n           " +
            " try {\\n              WxSc.Refl.Func(SocketConnection,\'removeCmdListener\',false," +
            "MAP_OGRE_LIST,true,keyFunc);\\n              WxSc.Refl.Func(SocketConnection,\'rem" +
            "oveCmdListener\',false,2409,true,keyFunc2409);\\n            } catch (e) {}\\n     " +
            "       WxSc.Util.SetIsHidePetFight(false);\\n            alert(\'任务完成，请打开背包查看\');\\n" +
            "            return;\\n          }\\n        } else {\\n          console.log(info.e" +
            "ffectList[0].effectID, info.effectList[0].args);\\n          WxSc.Util.Send(2304," +
            " newPetCt,0); // 放回仓库\\n        }\\n        break;\\n      }\\n    }\\n  });\\n  WxSc." +
            "Refl.Func(SocketConnection,\'addCmdListener\',false,2409,true,keyFunc2409);\\n})()\\" +
            "nWxSc.Util.ChangeMap(1216);\"\r\n  }\r\n}")]
        public string FlashFightTemplate {
            get {
                return ((string)(this["FlashFightTemplate"]));
            }
            set {
                this["FlashFightTemplate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\r\n  \"换色\": \"NonoColorChangePanel\",\r\n  \"炫光\": \"AssessorPanel\"\r\n}")]
        public string ActivityCollection {
            get {
                return ((string)(this["ActivityCollection"]));
            }
            set {
                this["ActivityCollection"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadActivities {
            get {
                return ((bool)(this["AutoLoadActivities"]));
            }
            set {
                this["AutoLoadActivities"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadFightHandler {
            get {
                return ((bool)(this["AutoLoadFightHandler"]));
            }
            set {
                this["AutoLoadFightHandler"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadScreenShot {
            get {
                return ((bool)(this["AutoLoadScreenShot"]));
            }
            set {
                this["AutoLoadScreenShot"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadFlashMap {
            get {
                return ((bool)(this["AutoLoadFlashMap"]));
            }
            set {
                this["AutoLoadFlashMap"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{}")]
        public string SpecificPetSkins {
            get {
                return ((string)(this["SpecificPetSkins"]));
            }
            set {
                this["SpecificPetSkins"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string FiddleObjects {
            get {
                return ((string)(this["FiddleObjects"]));
            }
            set {
                this["FiddleObjects"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadFD {
            get {
                return ((bool)(this["AutoLoadFD"]));
            }
            set {
                this["AutoLoadFD"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("https://seer.61.com/play.shtml")]
        public string DefaultURL {
            get {
                return ((string)(this["DefaultURL"]));
            }
            set {
                this["DefaultURL"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public int FavouriteMap {
            get {
                return ((int)(this["FavouriteMap"]));
            }
            set {
                this["FavouriteMap"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsHideBattleStrategy {
            get {
                return ((bool)(this["IsHideBattleStrategy"]));
            }
            set {
                this["IsHideBattleStrategy"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool AutoMute {
            get {
                return ((bool)(this["AutoMute"]));
            }
            set {
                this["AutoMute"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsLoadFormSpeedhack {
            get {
                return ((bool)(this["IsLoadFormSpeedhack"]));
            }
            set {
                this["IsLoadFormSpeedhack"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string PetFollow {
            get {
                return ((string)(this["PetFollow"]));
            }
            set {
                this["PetFollow"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string Suits {
            get {
                return ((string)(this["Suits"]));
            }
            set {
                this["Suits"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string Mount {
            get {
                return ((string)(this["Mount"]));
            }
            set {
                this["Mount"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool ScaleKeep {
            get {
                return ((bool)(this["ScaleKeep"]));
            }
            set {
                this["ScaleKeep"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("240")]
        public string PosX {
            get {
                return ((string)(this["PosX"]));
            }
            set {
                this["PosX"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("240")]
        public string PosY {
            get {
                return ((string)(this["PosY"]));
            }
            set {
                this["PosY"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string Title {
            get {
                return ((string)(this["Title"]));
            }
            set {
                this["Title"] = value;
            }
        }
    }
}
